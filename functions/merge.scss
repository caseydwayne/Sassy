///--------------------------------------------------------------------------///

@import 'set', 'types';

///--------------------------------------------------------------------------///



///--------------------------------------------------------------------------///

$MERGE_UNSUPPORTED: 'merge accepts only maps, lists, or strings...';
$MERGE_NEEDS_SAME: 'merge requires that all items (parameters) are the same type.';
$MERGE_NEEDS_TWO: 'merge needs at least 2 parameters of the same type...';

@function sassy-merge( $items... ){

  $l: length( $items );    
  $first: true;
  $f: null;
  @if $l > 1 {
    @if types-same( $items ){
      $f: nth( $items, 1 );
      $t: type( $f );
      @each $x in $items {
        @if $first { $first: false }
        @else {
          @if $t == map {
            @each $k, $v in $x {
              $f: set( $f, $k, $v );
            }
          } @else {            
            @if $t == list {
              @each $v in $x {
                $f: join( $f, $v );
              }
            } @else {
              @if $t == string {
                $f: $f+$x;
              } @else {
                @error '#{$MERGE_UNSUPPORTED} received #{$t}';
              }
            }
          }
        }
      } //end each items
    } //end same types
    @else {
      @error '#{$MERGE_NEEDS_SAME} received #{types($items)}';  
    }
  } @else {
    @error '#{$MERGE_NEEDS_TWO} received #{$l}';
  }

  @return $f;

}    

///--------------------------------------------------------------------------///

// aliases
//map-join, list-merge

///--------------------------------------------------------------------------///

@if false {

  $n: sassy-merge;
  $x: a b c;
  $y: d e f;
  $e: a b c d e f;
  //$a: ( $x, $y );
  $r: call( $n, $x, $y );
  @debug '#{$n} [list] works: #{ $r == $e or inspect($r) }';  
  
  $m:( my: map, to: merge );
  $x: ( with: this );
  $a: ( $m, $x );
  $r: call( $n, $m, $x );
  $e: ( my: map, to: merge, with: this );
  @debug '#{$n} [map] works: #{ $r == $e or inspect($r) }';  

  $s: mystring;
  $x: isbetterthanyours;
  $a: ( $m, $x );
  $r: call( $n, $s, $x );
  $e: $s+$x;
  @debug '#{$n} [string] works: #{ $r == $e or inspect($r) }';  
  
}

///--------------------------------------------------------------------------///