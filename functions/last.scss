///--------------------------------------------------------------------------///

@import
  'has',
  'contains',
  'explode',
  'compare',
  'type',
  'pop',
  'split',
  'divide',
  'construct'
;

///--------------------------------------------------------------------------///

/// @method str-last
 // get last character of a string
 // @param {string} string
 // @return {string} last character
 ///

@function str-last( $s, $n: 1 ){  
  @if type( $s ) != string { @error 'str-last requires a string! ( string, number )'; }
  @if type( $n, string ) { $n: str-length( $n ); }
  $l: str-length( $s );
  @if $n >= $l {
    @error 'you are trying to get the last #{$n} characters in a string that contains #{$l}. please correct this and try again.';
  }  
  @return str-slice( $s, -$n );
}

@function list-last( $l, $n: 1 ){
  @if type( $l ) != list { @error 'list-last requires a list! ( list, number )'; }
  @if type( $n, list ) { $n: length( $n ); } 
  $len: length( $l );
  @if $len and $n >= $len {
    //@error 'you are trying to get the last #{$n} values in a list with a length of #{$len}. please correct this and try again.';
    @warn 'you are trying to get the last #{$n} values in a list with a length of #{$len}. please correct this and try again.';
  }
  @return if( $n > 1, nth( list-pop( $l, $n ), 1 ), nth( $l, $len ) );
}

@function map-last( $m, $n ){
  @if type( $m ) != map { @error 'map-last requires a map! ( map, number )'; }
  @if type( $n, map ) { $n: length( $n ); }  
  $x: divide( $m );
  $k: list-last( nth( $x, 1 ) );
  $v: list-last( nth( $x, 2 ) );
  $r: construct( $k, $v );
  @return $r;
  //@return 'map-last coming soon!';
}

///--------------------------------------------------------------------------///

@function last-word( $string, $delim: '-' ){
  $l: explode( $string, $delim );
  @return nth( $l, length($l) );
}

///--------------------------------------------------------------------------///

@function last-char( $string, $each: false, $delim: '-' ){
  $s: '';
  @if $each == true {
    $l: explode( $string, $delim );
    @each $w in $l {      
      $s: $s + str-last( $w );
    }
  }
  @else {
    $s: str-last( $string );
  }
  @return $s;
}

$sassy_last_handlers: (
  string: str-last,
  list: list-last,
  map: map-last
);

@function last( $x, $n: 1, $c: null ){
  
  $_DEBUG: 1;
  
  $t: type($x);
  $h: has( $sassy_last_handlers, $t, true );
  $r: null;
  
  @if type($h) != string {
    @error 'No last() handler found for #{$t}';
  } @else {
    @if $_DEBUG { @debug 'calling method #{$h}'; }
    $r: call( $h, $x, $n );
    @if type($n) == $t { $c: $n; }
    @if $_DEBUG { @debug 'comparing \a#{$r} and \a#{$c}'; }
    @if $c { $r: compare( $r, $c ); }    
  }
  @return $r;  
}

///--------------------------------------------------------------------------///

@if false {
  
  //string tests
  $s: string;
  
  $n: str-last;
  $r: call( $n, $s );
  $e: g;
  @debug '#{$n} works? #{ $r == $e or $r }';  
  
  $s: hyphen-word;
  $n: last-word;
  $r: call( $n, $s );
  $e: word;
  @debug '#{$n} works? #{ $r == $e or $r }';
    
  $n: last-char;
  $r: call( $n, $s, true );
  $e: nd;
  @debug '#{$n} [each word] works? #{ $r == $e or $r }';
  
  $s: string;
  $n: last;
  $r: call( $n, $s, 4 );
  $e: ring;
  @debug '#{$n} [string, number] works? #{ $r == $e or $r }';
  $r: call( $n, $s, $r );
  @debug '#{$n} [string, string] works? #{ $r == $e or $r }';
  
  //array (list) tests  
  $x: things;
  $a: list of $x;
  $r: call( $n, $a );
  $e: $x;
  @debug '#{$n} [list] works? #{ $r == $e or $r }';
  
  $e: ( of $x );
  $r: call( $n, $a, $e );
  @debug '#{$n} [list, list] works? #{ $r == $e or $r }';
}

///--------------------------------------------------------------------------///