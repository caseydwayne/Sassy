///--------------------------------------------------------------------------///

@import
  'has',
  'contains',
  'explode',
  'compare'
;

///--------------------------------------------------------------------------///

/// @method str-first
 // get first character of a string
 // @param {string} string
 // @return {string} first character
 ///

@function str-first( $string, $n: 1 ){  
  @return str-slice( $string, 1, $n );
}

@function list-first( $l ){
  @return nth( $l, 1 );
}

@function map-last( $m, $n ){
  @return 'map-last coming soon!';
}

///--------------------------------------------------------------------------///

@function first-word( $string, $delim: '-' ){
  $l: explode( $string, $delim );
  @return list-first( $l );
}

///--------------------------------------------------------------------------///

@function first-char( $string, $each: false, $delim: '-' ){
  $s: '';
  @if $each == true {
    $l: explode( $string, $delim );
    @each $w in $l {
      $s: $s + str-first( $w );
    }
  }
  @else {
    $s: str-first( $string );
  }
  @return $s;
}

///--------------------------------------------------------------------------///

$sassy_first_handlers: (
  string: 'str-first',
  list: list-first,
  map: map-first
);

@function first( $x, $n: 1, $c: null ){
  $t: type($x);
  $h: get( $sassy_first_handlers, $t );
 // @debug type($h);
  $r: null;  
  @if type($h) != string {
    @error 'No first() handler found for #{$t}';
  } @else {
    @if type( $n ) != number { 
      @if type( $n, $t ) { 
        $c: $n;
        $n: length( $c );
      } @else { $n: 1; }
    }
    $r: call( $h, $x, $n );
    @if $c { $r: compare( $r, $c ) }
  }
  @return $r;  
}

///--------------------------------------------------------------------------///

@if false {
  
  $s: string;
  
  $n: str-first;
  $r: call( $n, $s );
  $e: s;
  @debug '#{$n} works? #{ $r == $e }';
  
  
  $s: hyphen-word;
  $n: first-word;
  $r: call( $n, $s );
  $e: hyphen;
  @debug '#{$n} works? #{ $r == $e or $r }';
    
  $n: first-char;
  $r: call( $n, $s, true );
  $e: hw;
  @debug '#{$n} [each word] works? #{ $r == $e or $r }';

  //$n: first;
  //$r: call( $n, $s, 'str' );
  //$e: hw;
  //@debug '#{$n} [each word] works? #{ $r == $e or $r }';
  
}

///--------------------------------------------------------------------------///